<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AStar\Client\Api;

use \AStar\Client\ApiClient;
use \AStar\Client\ApiException;
use \AStar\Client\Configuration;
use \AStar\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * API Client
     *
     * @var \AStar\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \AStar\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\AStar\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \AStar\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \AStar\Client\ApiClient $apiClient set the API client
     *
     * @return SearchApi
     */
    public function setApiClient(\AStar\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation searchByAPIID
     *
     * Get transaction informations by API ID
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param int $id API id for blockchain transaction (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return \AStar\Client\Model\Transaction
     */
    public function searchByAPIID($token, $account, $user, $pass, $id)
    {
        list($response) = $this->searchByAPIIDWithHttpInfo($token, $account, $user, $pass, $id);
        return $response;
    }

    /**
     * Operation searchByAPIIDWithHttpInfo
     *
     * Get transaction informations by API ID
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param int $id API id for blockchain transaction (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return array of \AStar\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByAPIIDWithHttpInfo($token, $account, $user, $pass, $id)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling searchByAPIID');
        }
        // verify the required parameter 'account' is set
        if ($account === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account when calling searchByAPIID');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling searchByAPIID');
        }
        // verify the required parameter 'pass' is set
        if ($pass === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pass when calling searchByAPIID');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling searchByAPIID');
        }
        // parse inputs
        $resourcePath = "/search/registered/id";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($account !== null) {
            $formParams['account'] = $this->apiClient->getSerializer()->toFormValue($account);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = $this->apiClient->getSerializer()->toFormValue($user);
        }
        // form params
        if ($pass !== null) {
            $formParams['pass'] = $this->apiClient->getSerializer()->toFormValue($pass);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = $this->apiClient->getSerializer()->toFormValue($id);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AStar\Client\Model\Transaction',
                '/search/registered/id'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AStar\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AStar\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchByContent
     *
     * Get transaction informations by file or string content
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param string $content file or string content. (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return \AStar\Client\Model\Transaction
     */
    public function searchByContent($token, $account, $user, $pass, $content)
    {
        list($response) = $this->searchByContentWithHttpInfo($token, $account, $user, $pass, $content);
        return $response;
    }

    /**
     * Operation searchByContentWithHttpInfo
     *
     * Get transaction informations by file or string content
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param string $content file or string content. (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return array of \AStar\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByContentWithHttpInfo($token, $account, $user, $pass, $content)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling searchByContent');
        }
        // verify the required parameter 'account' is set
        if ($account === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account when calling searchByContent');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling searchByContent');
        }
        // verify the required parameter 'pass' is set
        if ($pass === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pass when calling searchByContent');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling searchByContent');
        }
        // parse inputs
        $resourcePath = "/search/registered/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($account !== null) {
            $formParams['account'] = $this->apiClient->getSerializer()->toFormValue($account);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = $this->apiClient->getSerializer()->toFormValue($user);
        }
        // form params
        if ($pass !== null) {
            $formParams['pass'] = $this->apiClient->getSerializer()->toFormValue($pass);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = $this->apiClient->getSerializer()->toFormValue($content);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AStar\Client\Model\Transaction',
                '/search/registered/content'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AStar\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AStar\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchByHash
     *
     * Get transaction informations by file or string hash
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param string $hash hash of content. (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return \AStar\Client\Model\Transaction
     */
    public function searchByHash($token, $account, $user, $pass, $hash)
    {
        list($response) = $this->searchByHashWithHttpInfo($token, $account, $user, $pass, $hash);
        return $response;
    }

    /**
     * Operation searchByHashWithHttpInfo
     *
     * Get transaction informations by file or string hash
     *
     * @param string $token a signed JWT token with the company privatekey. (required)
     * @param int $account API ID for Account where the coins must be spend. (required)
     * @param string $user API user name. (required)
     * @param string $pass API user password. (required)
     * @param string $hash hash of content. (required)
     * @throws \AStar\Client\ApiException on non-2xx response
     * @return array of \AStar\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByHashWithHttpInfo($token, $account, $user, $pass, $hash)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling searchByHash');
        }
        // verify the required parameter 'account' is set
        if ($account === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account when calling searchByHash');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling searchByHash');
        }
        // verify the required parameter 'pass' is set
        if ($pass === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pass when calling searchByHash');
        }
        // verify the required parameter 'hash' is set
        if ($hash === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hash when calling searchByHash');
        }
        // parse inputs
        $resourcePath = "/search/registered/hash";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($account !== null) {
            $formParams['account'] = $this->apiClient->getSerializer()->toFormValue($account);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = $this->apiClient->getSerializer()->toFormValue($user);
        }
        // form params
        if ($pass !== null) {
            $formParams['pass'] = $this->apiClient->getSerializer()->toFormValue($pass);
        }
        // form params
        if ($hash !== null) {
            $formParams['hash'] = $this->apiClient->getSerializer()->toFormValue($hash);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AStar\Client\Model\Transaction',
                '/search/registered/hash'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AStar\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AStar\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
