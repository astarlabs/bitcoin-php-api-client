<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bitcoin API
 *
 * Blockchain Facilities
 *
 * OpenAPI spec version: 2.0.0
 * Contact: contato@astarlabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Transaction Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creationdate' => '\DateTime',
        'confirmationdate' => '\DateTime',
        'blockchaincreationdate' => '\DateTime',
        'txid' => 'string',
        'amount' => 'float',
        'fee' => 'float',
        'txsize' => 'int',
        'txhex' => 'string',
        'data' => 'string',
        'feepriority' => 'int',
        'confirmations' => 'int',
        'errormessage' => 'string',
        'coin' => 'string',
        'test' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'creationdate' => 'creationdate',
        'confirmationdate' => 'confirmationdate',
        'blockchaincreationdate' => 'blockchaincreationdate',
        'txid' => 'txid',
        'amount' => 'amount',
        'fee' => 'fee',
        'txsize' => 'txsize',
        'txhex' => 'txhex',
        'data' => 'data',
        'feepriority' => 'feepriority',
        'confirmations' => 'confirmations',
        'errormessage' => 'errormessage',
        'coin' => 'coin',
        'test' => 'test'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'creationdate' => 'setCreationdate',
        'confirmationdate' => 'setConfirmationdate',
        'blockchaincreationdate' => 'setBlockchaincreationdate',
        'txid' => 'setTxid',
        'amount' => 'setAmount',
        'fee' => 'setFee',
        'txsize' => 'setTxsize',
        'txhex' => 'setTxhex',
        'data' => 'setData',
        'feepriority' => 'setFeepriority',
        'confirmations' => 'setConfirmations',
        'errormessage' => 'setErrormessage',
        'coin' => 'setCoin',
        'test' => 'setTest'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'creationdate' => 'getCreationdate',
        'confirmationdate' => 'getConfirmationdate',
        'blockchaincreationdate' => 'getBlockchaincreationdate',
        'txid' => 'getTxid',
        'amount' => 'getAmount',
        'fee' => 'getFee',
        'txsize' => 'getTxsize',
        'txhex' => 'getTxhex',
        'data' => 'getData',
        'feepriority' => 'getFeepriority',
        'confirmations' => 'getConfirmations',
        'errormessage' => 'getErrormessage',
        'coin' => 'getCoin',
        'test' => 'getTest'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creationdate'] = isset($data['creationdate']) ? $data['creationdate'] : null;
        $this->container['confirmationdate'] = isset($data['confirmationdate']) ? $data['confirmationdate'] : null;
        $this->container['blockchaincreationdate'] = isset($data['blockchaincreationdate']) ? $data['blockchaincreationdate'] : null;
        $this->container['txid'] = isset($data['txid']) ? $data['txid'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['txsize'] = isset($data['txsize']) ? $data['txsize'] : null;
        $this->container['txhex'] = isset($data['txhex']) ? $data['txhex'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['feepriority'] = isset($data['feepriority']) ? $data['feepriority'] : null;
        $this->container['confirmations'] = isset($data['confirmations']) ? $data['confirmations'] : null;
        $this->container['errormessage'] = isset($data['errormessage']) ? $data['errormessage'] : null;
        $this->container['coin'] = isset($data['coin']) ? $data['coin'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets creationdate
     * @return \DateTime
     */
    public function getCreationdate()
    {
        return $this->container['creationdate'];
    }

    /**
     * Sets creationdate
     * @param \DateTime $creationdate API register creation date.
     * @return $this
     */
    public function setCreationdate($creationdate)
    {
        $this->container['creationdate'] = $creationdate;

        return $this;
    }

    /**
     * Gets confirmationdate
     * @return \DateTime
     */
    public function getConfirmationdate()
    {
        return $this->container['confirmationdate'];
    }

    /**
     * Sets confirmationdate
     * @param \DateTime $confirmationdate first confirmation date.
     * @return $this
     */
    public function setConfirmationdate($confirmationdate)
    {
        $this->container['confirmationdate'] = $confirmationdate;

        return $this;
    }

    /**
     * Gets blockchaincreationdate
     * @return \DateTime
     */
    public function getBlockchaincreationdate()
    {
        return $this->container['blockchaincreationdate'];
    }

    /**
     * Sets blockchaincreationdate
     * @param \DateTime $blockchaincreationdate blockchain creation date.
     * @return $this
     */
    public function setBlockchaincreationdate($blockchaincreationdate)
    {
        $this->container['blockchaincreationdate'] = $blockchaincreationdate;

        return $this;
    }

    /**
     * Gets txid
     * @return string
     */
    public function getTxid()
    {
        return $this->container['txid'];
    }

    /**
     * Sets txid
     * @param string $txid hash ID of blockchain transaction.
     * @return $this
     */
    public function setTxid($txid)
    {
        $this->container['txid'] = $txid;

        return $this;
    }

    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount amount sended, 0 if OP_RETURN.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets fee
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     * @param float $fee fee spended in the blockchain transaction.
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets txsize
     * @return int
     */
    public function getTxsize()
    {
        return $this->container['txsize'];
    }

    /**
     * Sets txsize
     * @param int $txsize tx size.
     * @return $this
     */
    public function setTxsize($txsize)
    {
        $this->container['txsize'] = $txsize;

        return $this;
    }

    /**
     * Gets txhex
     * @return string
     */
    public function getTxhex()
    {
        return $this->container['txhex'];
    }

    /**
     * Sets txhex
     * @param string $txhex tx hexadecimal.
     * @return $this
     */
    public function setTxhex($txhex)
    {
        $this->container['txhex'] = $txhex;

        return $this;
    }

    /**
     * Gets data
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param string $data file or string hash or address
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets feepriority
     * @return int
     */
    public function getFeepriority()
    {
        return $this->container['feepriority'];
    }

    /**
     * Sets feepriority
     * @param int $feepriority account fee priority
     * @return $this
     */
    public function setFeepriority($feepriority)
    {
        $this->container['feepriority'] = $feepriority;

        return $this;
    }

    /**
     * Gets confirmations
     * @return int
     */
    public function getConfirmations()
    {
        return $this->container['confirmations'];
    }

    /**
     * Sets confirmations
     * @param int $confirmations actual transaction confirmations count
     * @return $this
     */
    public function setConfirmations($confirmations)
    {
        $this->container['confirmations'] = $confirmations;

        return $this;
    }

    /**
     * Gets errormessage
     * @return string
     */
    public function getErrormessage()
    {
        return $this->container['errormessage'];
    }

    /**
     * Sets errormessage
     * @param string $errormessage error message in case of errors
     * @return $this
     */
    public function setErrormessage($errormessage)
    {
        $this->container['errormessage'] = $errormessage;

        return $this;
    }

    /**
     * Gets coin
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     * @param string $coin coin
     * @return $this
     */
    public function setCoin($coin)
    {
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets test
     * @return int
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     * @param int $test test
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


